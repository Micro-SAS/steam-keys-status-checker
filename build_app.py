#!/usr/bin/env python3
"""
Script de packaging pour Steam Keys Checker
Cr√©e un ex√©cutable distributable de l'application.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_pyinstaller():
    """Installe PyInstaller si n√©cessaire."""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller d√©j√† install√©")
    except ImportError:
        print("üì¶ Installation de PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller install√©")

def clean_build():
    """Nettoie les dossiers de build pr√©c√©dents."""
    folders_to_clean = ['build', 'dist', '__pycache__']
    
    for folder in folders_to_clean:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"üßπ Dossier {folder} nettoy√©")

def create_spec_file():
    """Cr√©e le fichier .spec pour PyInstaller."""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['steam_keys_gui.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('README.md', '.'),
    ],
    hiddenimports=[
        'selenium',
        'pandas',
        'webdriver_manager',
        'tkinter',
        'threading'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='SteamKeysChecker',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open('steam_keys_checker.spec', 'w') as f:
        f.write(spec_content)
    
    print("‚úÖ Fichier .spec cr√©√©")

def build_executable():
    """Construit l'ex√©cutable."""
    print("üî® Construction de l'ex√©cutable...")
    
    cmd = [
        'pyinstaller',
        '--onefile',
        '--windowed',
        '--name=SteamKeysChecker',
        '--add-data=README.md:.',
        'steam_keys_gui.py'
    ]
    
    try:
        subprocess.check_call(cmd)
        print("‚úÖ Ex√©cutable cr√©√© avec succ√®s!")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la construction: {e}")
        return False
    
    return True

def create_installer_script():
    """Cr√©e un script d'installation simple."""
    if sys.platform == "win32":
        installer_content = '''@echo off
echo üîë Steam Keys Status Checker - Installation
echo ==========================================
echo.
echo Installation des d√©pendances...
pip install -r requirements.txt
echo.
echo ‚úÖ Installation termin√©e!
echo.
echo Pour lancer l'application:
echo   python steam_keys_gui.py
echo.
pause
'''
        with open('install.bat', 'w') as f:
            f.write(installer_content)
        print("‚úÖ Script d'installation Windows cr√©√© (install.bat)")
    
    else:  # Unix/Linux/macOS
        installer_content = '''#!/bin/bash
echo "üîë Steam Keys Status Checker - Installation"
echo "=========================================="
echo
echo "Installation des d√©pendances..."
pip3 install -r requirements.txt
echo
echo "‚úÖ Installation termin√©e!"
echo
echo "Pour lancer l'application:"
echo "  python3 steam_keys_gui.py"
echo
read -p "Appuyez sur Entr√©e pour continuer..."
'''
        with open('install.sh', 'w') as f:
            f.write(installer_content)
        
        # Rendre ex√©cutable
        os.chmod('install.sh', 0o755)
        print("‚úÖ Script d'installation Unix cr√©√© (install.sh)")

def create_readme_app():
    """Cr√©e un README sp√©cifique pour l'application desktop."""
    readme_content = '''# üîë Steam Keys Status Checker - Application Desktop

## üöÄ D√©marrage Rapide

### Option 1 : Ex√©cutable (Recommand√©)
1. T√©l√©chargez `SteamKeysChecker.exe` (Windows) ou `SteamKeysChecker` (Mac/Linux)
2. Double-cliquez pour lancer l'application
3. Suivez les instructions √† l'√©cran

### Option 2 : Script Python
1. Installez Python 3.8+ sur votre syst√®me
2. Ex√©cutez le script d'installation :
   - Windows : `install.bat`
   - Mac/Linux : `./install.sh`
3. Lancez l'application : `python steam_keys_gui.py`

## üìã Utilisation

1. **Choisir fichier CSV** : S√©lectionnez votre fichier de cl√©s Steam
2. **Configuration** : 
   - Cochez "2 colonnes" si vous avez deux colonnes de cl√©s
   - Ajustez les noms des colonnes si n√©cessaire
3. **Lancer la v√©rification** : Chrome s'ouvrira automatiquement
4. **Connexion Steamworks** : Connectez-vous dans la fen√™tre Chrome
5. **Attendre** : La v√©rification se fait automatiquement
6. **R√©cup√©rer** : Le CSV avec les statuts sera sauvegard√©

## üîß Configuration CSV

Votre fichier CSV doit contenir :
- **Colonnes de cl√©s** : `key_1`, `key_2` (optionnel)
- **Colonne de filtrage** : `to check` (valeurs: true/false, 1/0, yes/no)

## üìä R√©sultats

Les statuts suivants sont d√©tect√©s :
- **Activated** : Cl√© d√©j√† utilis√©e
- **Not activated** : Cl√© disponible
- **Invalid** : Cl√© non valide
- **Error** : Probl√®me lors de la v√©rification

## ‚ö†Ô∏è Pr√©requis

- Compte Steamworks Partner valide
- Connexion Internet stable
- Chrome install√© sur votre syst√®me

## üÜò Support

En cas de probl√®me :
1. V√©rifiez que Chrome est install√©
2. V√©rifiez votre connexion Steamworks
3. Consultez les logs dans l'application
4. Contactez le support : [GitHub Issues](https://github.com/Micro-SAS/steam-keys-status-checker/issues)

---

**Version 2.0 Desktop** - Cr√©√© par [Micro-SAS](https://github.com/Micro-SAS)
'''
    
    with open('README_DESKTOP.md', 'w') as f:
        f.write(readme_content)
    
    print("‚úÖ README desktop cr√©√©")

def main():
    print("üîë Steam Keys Checker - Script de Packaging")
    print("=" * 50)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not os.path.exists('steam_keys_gui.py'):
        print("‚ùå Erreur: steam_keys_gui.py non trouv√©!")
        print("Ex√©cutez ce script depuis le r√©pertoire du projet.")
        return
    
    # Nettoyer les builds pr√©c√©dents
    clean_build()
    
    # Installer PyInstaller
    install_pyinstaller()
    
    # Cr√©er les fichiers d'installation
    create_installer_script()
    create_readme_app()
    
    # Demander si on veut cr√©er l'ex√©cutable
    response = input("\nü§î Voulez-vous cr√©er l'ex√©cutable? (y/N): ").lower()
    if response in ['y', 'yes', 'oui']:
        if build_executable():
            print("\nüéâ Packaging termin√© avec succ√®s!")
            print(f"üìÅ Ex√©cutable disponible dans: dist/")
            
            if os.path.exists('dist/SteamKeysChecker.exe'):
                print(f"   - Windows: dist/SteamKeysChecker.exe")
            elif os.path.exists('dist/SteamKeysChecker'):
                print(f"   - Unix: dist/SteamKeysChecker")
        else:
            print("\n‚ùå Erreur lors du packaging")
    else:
        print("\n‚úÖ Scripts d'installation cr√©√©s")
        print("Pour cr√©er l'ex√©cutable plus tard, relancez ce script.")
    
    print("\nüìã Fichiers cr√©√©s:")
    files_created = []
    if os.path.exists('install.bat'):
        files_created.append("install.bat (Windows)")
    if os.path.exists('install.sh'):
        files_created.append("install.sh (Unix)")
    if os.path.exists('README_DESKTOP.md'):
        files_created.append("README_DESKTOP.md")
    if os.path.exists('dist/'):
        files_created.append("dist/ (ex√©cutable)")
    
    for file in files_created:
        print(f"   - {file}")

if __name__ == "__main__":
    main() 